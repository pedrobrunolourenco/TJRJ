baseado nas duas classes que representam entidades:

using FluentValidation;

namespace TJRJ.Domain.Entities
{
    public class Livro : Entity
    {
        public Livro() { }

        public Livro(int codI, string titulo, string editora, int edicao, string anoPublicacao)
        {
            CodI = codI;
            Titulo = titulo;
            Editora = editora;
            Edicao = edicao;
            AnoPublicacao = anoPublicacao;
        }

        public int CodI { get; private set; }
        public string Titulo { get; private set; }
        public string Editora { get; private set; }
        public int Edicao { get; private set; }
        public string AnoPublicacao { get; private set; }


        public override bool Validar()
        {
            ValidationResult = new LivroValidation().Validate(this);
            foreach (var erro in ValidationResult.Errors)
            {
                ListaErros.Add(erro.ErrorMessage);
            }
            return ValidationResult.IsValid;
        }

        public class LivroValidation : AbstractValidator<Livro>
        {

            public LivroValidation()
            {
                RuleFor(t => t.CodI)
                     .GreaterThan(0)
                     .WithMessage("Código do livro deve ser maior que zero.");

                RuleFor(t => t.Titulo)
                    .Length(1, 40)
                    .WithMessage("Informe o título com no mínimo 1 e no máximo 40 caracteres.");

                RuleFor(t => t.Editora)
                    .Length(1, 40)
                    .WithMessage("Informe a editora com no mínimo 1 e no máximo 40 caracteres.");

                RuleFor(t => t.Edicao)
                     .GreaterThan(0)
                     .WithMessage("O número da edição deve ser maior que zero.");

                RuleFor(t => t.AnoPublicacao)
                    .NotEmpty().WithMessage("Ano de publicação é obrigatório.")
                    .Matches(@"^\d{4}$").WithMessage("Ano de publicação deve conter exatamente 4 dígitos.")
                    .Must(ValidaAnoPublicacao).WithMessage("Ano de publicação não pode ser maior que o ano corrente.");
            }

            private bool ValidaAnoPublicacao(string ano)
            {
                if (int.TryParse(ano, out int anoInt))
                {
                    return anoInt <= DateTime.Now.Year;
                }
                return false;
            }


        }
    }
}

using FluentValidation;

namespace TJRJ.Domain.Entities
{
    public class Livro_Autor : Entity
    {

        public Livro_Autor() { }

        public Livro_Autor(int livro_CodI, int autor_CodAu)
        {
            Livro_CodI = livro_CodI;
            Autor_CodAu = autor_CodAu;
        }

        public int Livro_CodI { get; private set; }
        public int Autor_CodAu { get; private set; }


        public override bool Validar()
        {
            ValidationResult = new Livro_AutorValidation().Validate(this);
            foreach (var erro in ValidationResult.Errors)
            {
                ListaErros.Add(erro.ErrorMessage);
            }
            return ValidationResult.IsValid;
        }

        public class Livro_AutorValidation : AbstractValidator<Livro_Autor>
        {

            public Livro_AutorValidation()
            {
                RuleFor(t => t.Livro_CodI)
                     .GreaterThan(0)
                     .WithMessage("Código do livro deve ser maior que zero.");

                RuleFor(t => t.Autor_CodAu)
                     .GreaterThan(0)
                     .WithMessage("Código do autor deve ser maior que zero.");
            }
        }
    }
}

E baseado nessas duas classes de mapeamento EntityFramework, gostaria de fazer um relacionamento onde um Livro tenha N Livro_Autor

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TJRJ.Domain.Entities;

namespace TJRJ.Infra.Data.Mappings
{
    public class LivroMapping : IEntityTypeConfiguration<Livro>
    {
        public void Configure(EntityTypeBuilder<Livro> builder)
        {
            builder.HasKey(l => new { l.CodI });
            builder.Property(l => l.Titulo).IsRequired().HasColumnType("varchar").HasMaxLength(40);
            builder.Property(l => l.Editora).IsRequired().HasColumnType("varchar").HasMaxLength(40);
            builder.Property(l => l.Edicao).IsRequired().HasColumnType("int");
            builder.Property(l => l.AnoPublicacao).IsRequired().HasColumnType("varchar").HasMaxLength(4);
            builder.Ignore(p => p.ListaErros);
            builder.Ignore(p => p.ValidationResult);

            builder.ToTable("Livro");
        }
    }
}


using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TJRJ.Domain.Entities;

namespace TJRJ.Infra.Data.Mappings
{
    public class Livro_AutorMapping : IEntityTypeConfiguration<Livro_Autor>
    {
        public void Configure(EntityTypeBuilder<Livro_Autor> builder)
        {
            builder.HasKey(l => new { l.Livro_CodI, l.Autor_CodAu });

            builder.Property(l => l.Livro_CodI)
                   .IsRequired()
                   .HasColumnType("int");

            builder.Property(l => l.Autor_CodAu)
                   .IsRequired()
                   .HasColumnType("int");


            builder.Ignore(p => p.ListaErros);
            builder.Ignore(p => p.ValidationResult);

            builder.ToTable("Livro_Autor");
       }

    }
}

